/*
 * Samsung Exynos SoC series VPU driver
 *
 * Copyright (c) 2015 Samsung Electronics Co., Ltd
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef VPU_EXYNOS8895_H_
#define VPU_EXYNOS8895_H_

struct vpu_regblock vpu_reg_blk[] = {
	{0x20000, 0x1, "DUMMY"},
	{0x21000, 0x1, "VPU_PU_DMAIN0"},
	{0x21100, 0x1, "VPU_PU_DMAIN_MNM0"},
	{0x21200, 0x1, "VPU_PU_DMAIN_MNM1"},
	{0x21300, 0x1, "VPU_PU_DMAIN_WIDE0"},
	{0x21400, 0x1, "VPU_PU_DMAIN_WIDE1"},

	{0x22000, 0x1, "VPU_PU_DMAOT0"},
	{0x22100, 0x1, "VPU_PU_DMAOT_MNM0"},
	{0x22200, 0x1, "VPU_PU_DMAOT_MNM1"},
	{0x22300, 0x1, "VPU_PU_DMAOT_WIDE0"},
	{0x22400, 0x1, "VPU_PU_DMAOT_WIDE1"}, /* 10 */

	{0x24100, 0x1, "VPU_PU_SALB0"},
	{0x24200, 0x1, "VPU_PU_SALB1"},
	{0x24300, 0x1, "VPU_PU_SALB2"},
	{0x24400, 0x1, "VPU_PU_SALB3"},
	{0x24500, 0x1, "VPU_PU_SALB4"},
	{0x24600, 0x1, "VPU_PU_SALB5"},
	{0x24700, 0x1, "VPU_PU_SALB6"},
	{0x24800, 0x1, "VPU_PU_SALB7"},
	{0x24900, 0x1, "VPU_PU_SALB8"},

	{0x23500, 0x1, "VPU_PU_CALB0"}, /* 20 */
	{0x23600, 0x1, "VPU_PU_CALB1"},
	{0x23700, 0x1, "VPU_PU_CALB2"},

	{0x24B00, 0x1, "VPU_PU_ROIS0"},
	{0x24C00, 0x1, "VPU_PU_ROIS1"},

	{0x24D00, 0x1, "VPU_PU_CROP0"},
	{0x24E00, 0x1, "VPU_PU_CROP1"},
	{0x24F00, 0x1, "VPU_PU_CROP2"},

	{0x26F00, 0x1, "VPU_PU_MDE"},
	{0x27000, 0x1, "VPU_PU_MAP2LIST"},
	{0x27100, 0x1, "VPU_PU_NMS"}, /* 30 */

	{0x25E00, 0x1, "VPU_PU_SLF50"},
	{0x25F00, 0x1, "VPU_PU_SLF51"},
	{0x26000, 0x1, "VPU_PU_SLF52"},

	{0x26100, 0x1, "VPU_PU_SLF70"},
	{0x26200, 0x1, "VPU_PU_SLF71"},
	{0x26300, 0x1, "VPU_PU_SLF72"},

	{0x26400, 0x3, "VPU_PU_GLF50"},
	{0x26700, 0x3, "VPU_PU_GLF51"},

	{0x26A00, 0x1, "VPU_PU_CCM"},
	{0x24A00, 0x1, "VPU_PU_LUT"}, /* 40 */
	{0x23400, 0x1, "VPU_PU_INTEGRAL"},

	{0x26D00, 0x1, "VPU_PU_UPSCALER0"},
	{0x26E00, 0x1, "VPU_PU_UPSCALER1"},

	{0x26B00, 0x1, "VPU_PU_DNSCALER0"},
	{0x26C00, 0x1, "VPU_PU_DNSCALER1"},

	{0x23F00, 0x1, "VPU_PU_JOINER0"},
	{0x24000, 0x1, "VPU_PU_JOINER1"},

	{0x23D00, 0x1, "VPU_PU_SPLITTER0"},
	{0x23E00, 0x1, "VPU_PU_SPLITTER1"},

	{0x23800, 0x1, "VPU_PU_DUPLICATOR0"}, /* 50 */
	{0x23900, 0x1, "VPU_PU_DUPLICATOR1"},
	{0x23A00, 0x1, "VPU_PU_DUPLICATOR2"},
	{0x23B00, 0x1, "VPU_PU_DUPLICATOR_WIDE0"},
	{0x23C00, 0x1, "VPU_PU_DUPLICATOR_WIDE1"},

	{0x25C00, 0x1, "VPU_PU_HISTOGRAM"},
	{0x25D00, 0x1, "VPU_PU_NLF"},
	{0x27300, 0x1, "VPU_PU_FASTDEPTH"},
	{0x27600, 0x1, "VPU_PU_DISPARITY"},
	{0x27500, 0x1, "VPU_PU_INPAINT"},
	{0x27400, 0x1, "VPU_PU_CNN"}, /* 60 */
	{0x27200, 0x1, "VPU_PU_FLAMORB"},

	{0x25000, 0x1, "VPU_PU_FIFO_0"},
	{0x25100, 0x1, "VPU_PU_FIFO_1"},
	{0x25200, 0x1, "VPU_PU_FIFO_2"},
	{0x25300, 0x1, "VPU_PU_FIFO_3"},
	{0x25400, 0x1, "VPU_PU_FIFO_4"},
	{0x25500, 0x1, "VPU_PU_FIFO_5"},
	{0x25600, 0x1, "VPU_PU_FIFO_6"},
	{0x25700, 0x1, "VPU_PU_FIFO_7"},
	{0x25800, 0x1, "VPU_PU_FIFO_8"}, /* 70 */
	{0x25900, 0x1, "VPU_PU_FIFO_9"},
	{0x25A00, 0x1, "VPU_PU_FIFO_10"},
	{0x25B00, 0x1, "VPU_PU_FIFO_11"},
};

enum vpu_pmu_reg_name {
	CLKSTOP_OPEN_CMU_VPU_SYS_PWR_REG,
	FORCE_AUTOCLKGATE_CMU_VPU_SYS_PWR_REG,
	CLKSTOP_CMU_VPU_SYS_PWR_REG,
	DISABLE_PLL_CMU_VPU_SYS_PWR_REG,
	RESET_LOGIC_VPU_SYS_PWR_REG,
	MEMORY_VPU_SYS_PWR_REG,
	RESET_CMU_VPU_SYS_PWR_REG,
	LPI_RESIDUAL_CMU_VPU_SYS_PWR_REG,
	VPU_CONFIGURATION,
	VPU_STATUS
};

struct vpu_reg vpu_pmu_regs[] = {
	{0x13F0, "CLKSTOP_OPEN_CMU_VPU_SYS_PWR_REG"},
	{0x1470, "FORCE_AUTOCLKGATE_CMU_VPU_SYS_PWR_REG"},
	{0x14B0, "CLKSTOP_CMU_VPU_SYS_PWR_REG"},
	{0x14F0, "DISABLE_PLL_CMU_VPU_SYS_PWR_REG"},
	{0x1530, "RESET_LOGIC_VPU_SYS_PWR_REG"},
	{0x1570, "MEMORY_VPU_SYS_PWR_REG"},
	{0x15B0, "RESET_CMU_VPU_SYS_PWR_REG"},
	{0x1630, "LPI_RESIDUAL_CMU_VPU_SYS_PWR_REG"},
	{0x4180, "VPU_CONFIGURATION"},
	{0x4184, "VPU_STATUS"},
};

struct vpu_field vpu_pmu_fields[] = {
	{"CLKSTOP_OPEN_CMU_VPU_SYS_PWR_REG", 0, 2, RW},
	{"FORCE_AUTOCLKGATE_CMU_VPU_SYS_PWR_REG", 0, 1, RW},
	{"CLKSTOP_CMU_VPU_SYS_PWR_REG", 0, 1, RW},
	{"DISABLE_PLL_CMU_VPU_SYS_PWR_REG", 0, 1, RW},
	{"RESET_LOGIC_VPU_SYS_PWR_REG", 0, 2, RW},
	{"MEMORY_VPU_SYS_PWR_REG", 0, 2, RW},
	{"RESET_CMU_VPU_SYS_PWR_REG", 0, 2, RW},
	{"LPI_RESIDUAL_CMU_VPU_SYS_PWR_REG", 0, 1, RW},
	{"VPU_CONFIGURATION", 0, 4, RW},
	{"VPU_STATUS", 0, 4, RO},
};

enum vpu_cmuclk_reg_name {
	MUX_CLKCMU_VPU_BUS,
	DIV_CLKCMU_VPU_BUS
};

struct vpu_reg vpu_cmuclk_regs[] = {
	{0x1100, "MUX_CLKCMU_VPU_BUS"},
	{0x1908, "DIV_CLKCMU_VPU_BUS"}
};

enum vpu_clk_reg_name {
	MUX_CLKCMU_VPU_BUS_USER,
	VPU_CMU_CONTROLLER_OPTION,
	DIV_CLK_VPU_BUSP
};

struct vpu_reg vpu_clk_regs[] = {
	{0x0100, "MUX_CLKCMU_VPU_BUS_USER"},
	{0x0800, "VPU_CMU_CONTROLLER_OPTION"},
	{0x1800, "DIV_CLK_VPU_BUSP"},
};

struct vpu_field vpu_cmu_fields[] = {
	{"PLL_CON0_MUX_CLKCMU_VPU_BUS_USER", 4, 1, RW},
	{"VPU_CMU_CONTROLLER_OPTION", 28, 2, RW},
	{"CLK_CON_DIV_DIV_CLK_VPU_BUSP", 0, 3, RW}
};

enum vpu_reg_name {
	GLOBAL_CTRL,
	AXI_STATUS,
	CPU_CTRL,
	GCBCTRL_CHAIN_ID,
	GCBCTRL_COMMAND_CODE,
	GCBCTRL_COMMAND_EXECUTE,
	GCBCTRL_BUSY_STATE
};

struct vpu_reg vpu_regs[] = {
	{0x00004, "GLOBAL_CTRL"},
	{0x00008, "AXI_STATUS"},
	{0x00018, "CPU_CTRL"},
	{0x20100, "GCBCTRL_CHAIN_ID"},
	{0x20104, "GCBCTRL_COMMAND_CODE"},
	{0x20108, "GCBCTRL_COMMAND_EXECUTE"},
	{0x20114, "GCBCTRL_BUSY_STATE"}
};

#endif
